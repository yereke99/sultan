from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.message import Message
from load import dp, bot
from aiogram import types 
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import logging
from keyboard import*
from database import Database
import datetime
from main import*
import asyncio
from config import admin
from datetime import datetime
from traits import *
import time
from traits import*
from config import*
import os
from aiogram.types import InputMediaPhoto, InputMediaVideo

generator = Generator()
btn = Button()
db = Database()

# Dont touch!
#file_id = "BAACAgIAAxkBAAIBfmZVvFgHXNy6dEjDe2rDHuGlC3jrAALaTQAC1jOpSiMaJlO20CwKNQQ"  

c1 = "AgACAgIAAxkBAANWZwwJYx-Mxdz3bXT4SEukEgbkHqAAApLoMRtMEGBIAaRM4RDIKicBAAMCAAN5AAM2BA"
c2 = "AgACAgIAAxkBAANYZwwJblyv3nn33IDsvzbY41kaou0AApPoMRtMEGBISmkPOlWJvHkBAAMCAAN5AAM2BA"
c3 = "AgACAgIAAxkBAANaZwwJc-A2en9d9y52-fu4_ndBK-IAApToMRtMEGBIjBLpA2fvgIUBAAMCAAN5AAM2BA"

# Ensure the directory exists
os.makedirs('./pdf/', exist_ok=True)

class Forma(StatesGroup):
    s1 = State()  
    s2 = State()
    s3 = State() 
    s4 = State()

@dp.message_handler(state='*', commands='üîï –ë–∞—Å —Ç–∞—Ä—Ç—É')
@dp.message_handler(Text(equals='üîï –ë–∞—Å —Ç–∞—Ä—Ç—É', ignore_case=True), state='*')
async def cancell_handler(message: types.Message, state: FSMContext):
    """
    :param message: –ë–∞—Å—Ç–∞—Ä—Ç—ã–ª–¥—ã
    :param state: –¢–æ“õ—Ç–∞—Ç—É
    :return: finish
    """
    
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('–ë–∞—Å —Ç–∞—Ä—Ç—É!')
    
    await state.finish()
    await message.reply('–°—ñ–∑ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—Ç—ã“£—ã–∑.', reply_markup=btn.menu_not_paid())

@dp.message_handler(lambda message: not message.text.isdigit(), state=Forma.s1)
async def handler(message: types.Message):
    return await message.reply("–°–∞–Ω–¥–∞—Ä–º–µ–Ω –∂–∞–∑—ã“£—ã–∑ üî¢")


@dp.message_handler(lambda message: message.text.isdigit(), state=Forma.s1)
async def handler(message: types.Message, state: FSMContext):

    """
    state: number
    """
    try:
        await Forma.next()

        async with state.proxy() as data:
            data['count'] = int(message.text)

        sum = 2000 * data['count']

        async with state.proxy() as data:
            data['sum'] = sum
        
        media = [
            InputMediaPhoto(
                media=c1,
                caption="""*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

–û–ø–ª–∞—Ç–∞ –∂–∞—Å–∞—É “Ø—à—ñ–Ω —Å—ñ–ª—Ç–µ–º–µ–≥–µ ”©—Ç—ñ“£—ñ–∑: https://pay.kaspi.kz/pay/0wdcrpat
–ú“±–Ω–¥–µ –º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ 2000 —Ç–µ“£–≥–µ —Ç”©–ª–µ–Ω—É –∫–µ—Ä–µ–∫. –ë–∞—Å“õ–∞ —Å—É–º–º–∞ —Ç”©–ª–µ–ø “õ–æ–π—Å–∞“£—ã–∑, –±–æ—Ç –æ“õ—ã–º–∞–π–¥—ã –∂”ô–Ω–µ –∞“õ—à–∞“£—ã–∑ “õ–∞–π—Ç–ø–∞–π–¥—ã. “ö–∞—Ç–µ–ª–µ—Å–ø–µ–π —Ç”©–ª–µ“£—ñ–∑!

1. –¢”©–ª–µ–º –∂–∞—Å–∞–ø –±–æ–ª“ì–∞–Ω —Å–æ“£ —á–µ–∫—Ç—ñ –ü–î–§ —Ñ–∞–π–ª –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑( —Ñ–æ—Ç–æ–¥–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω–¥–µ–π)

2. –¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å—É–º–º–∞ 2000 —Ç–µ“£–≥–µ–Ω—ñ“£ –±—ñ—Ä–µ—É—ñ –±–æ–ª—É –∫–µ—Ä–µ–∫

3. –¢”©–ª–µ–º ”©—Ç–∫–µ–Ω —Å–æ“£ –±–æ—Ç —Å—ñ–∑–≥–µ –∫–∏–Ω–æ“ì–∞ –±–∏–ª–µ—Ç –Ω”©–º–µ—Ä—ñ“£—ñ–∑–±–µ–Ω, –∫–∏–Ω–æ–ª–∞—Ä–¥—ã –∂—ñ–±–µ—Ä–µ–¥—ñ

–ü–î–§ —Ñ–∞–π–ª—ã–º–µ–Ω —á–µ–∫—Ç—ñ —Ç”©–º–µ–Ω–≥–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑  üëá*""",
                parse_mode="Markdown",
                protect_content=True
            ),
            InputMediaPhoto(
                media=c2,
                parse_mode="Markdown",
                protect_content=True
            ),
            InputMediaPhoto(
                media=c3,
                parse_mode="Markdown",
                protect_content=True
            ),
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫–∞–∫ –∞–ª—å–±–æ–º
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media,
            protect_content=True
        )

        
        await bot.send_message(
            message.from_user.id,
            text="*Kaspi Pay - —Ç”©–ª–µ–º –∂“Ø–π–µ—Å—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞ –æ—Ç—ã—Ä–∞ üí≥ —Ç”©–ª–µ–º –∂–∞—Å–∞“£—ã–∑\n–ö–∏–Ω–æ–Ω—ã“£ üí≥ –±–∞“ì–∞—Å—ã: %d —Ç–µ“£–≥–µ*"%sum,
            parse_mode="Markdown",
            reply_markup=btn.payment()
        ) 
        
    except Exception as e:
        print(e) 
        await Forma.s1.set()
        await bot.send_message(
            message.from_user.id,
            text="*“ö–∞–Ω—à–∞ –±–∏–ª–µ—Ç –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? –ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
        )   

        await bot.send_message(
            admin,
            text="Error: %s"%str(e),
        )   

@dp.message_handler(lambda message: not (message.document and message.document.mime_type == 'application/pdf'), state=Forma.s2, content_types=types.ContentType.DOCUMENT)
async def pdf_validator(message: types.Message, state: FSMContext):
    await message.reply(".pdf —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç—ã–º–µ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!")
    await Forma.s2.set()

@dp.message_handler(state=Forma.s2, content_types=types.ContentType.DOCUMENT)
async def handler(message: types.Message, state: FSMContext):

    try:
        document = message.document

        # Generate a unique filename
        user_id = message.from_user.id
        timestamp = int(time.time())
        random_int = Generator.generate_random_int()
        file_name = f"{user_id}_{timestamp}_{random_int}.pdf"
        file_path = os.path.join('./pdf/', file_name)

        # Download the PDF file
        file_info = await bot.get_file(document.file_id)
        await bot.download_file(file_info.file_path, file_path)

        # Process the PDF file
        pdf_reader = PDFReader(file_path)
        pdf_reader.open_pdf()
        result = pdf_reader.extract_specific_info()
        pdf_reader.close_pdf()


        async with state.proxy() as data:
            data['data'] = message.text
            data['pdf_result'] = result
            data['fileName'] = file_name

        print(data['pdf_result'])
        if convert_currency_to_int(data['pdf_result'][2]) != data['sum']: 
            await bot.send_message(
                message.from_user.id,
                text="*–¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å—É–º–º–∞ “õ–∞—Ç–µ!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                parse_mode="Markdown",
                reply_markup=btn.menu_not_paid()
            )  
            await state.finish() 
            return
        
        print(data['pdf_result'][4])

        if data['pdf_result'][4] == "–°–∞—Ç—É—à—ã–Ω—ã“£ –ñ–°–ù/–ë–°–ù 011225600097" or data['pdf_result'][4] == "–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ 011225600097":
        
            if db.CheckLoto(data['pdf_result'][3]) == True:
                await bot.send_message(
                    message.from_user.id,
                    text="*–ß–ï–ö –¢”®–õ–ï–ù–Ü–ü “ö–û–ô–´–õ“í–ê–ù!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu_not_paid()
                )  
                await state.finish() 
                return
            
            await Forma.next()
            await bot.send_message(
                message.from_user.id,
                text="*–°—ñ–∑–±–µ–Ω –∫–µ—Ä—ñ üì≤ –±–∞–π–ª–∞–Ω—ã—Å“õ–∞ —à—ã“ì—É “Ø—à—ñ–Ω –±–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑! –¢”©–º–µ–Ω–¥–µ —Ç“±—Ä“ì–∞–Ω \n\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ñ–º–µ–Ω –±”©–ª—ñ—Å—É –∫–Ω–æ–ø–∫–∞—Å—ã–Ω –±–∞—Å—ã–Ω—ã–∑\n\n–ï–®“ö–ê–®–ê–ù –°–ê–ù–î–ê–†–ú–ï–ù –ñ–ê–ó–ë–ê–ô–ú–´–ó ‚ÄºÔ∏è*",
                parse_mode="Markdown",
                reply_markup=btn.send_contact()
            )
            return
        
        await bot.send_message(
                message.from_user.id,
                text="*–î“±—Ä—ã—Å –µ–º–µ—Å —Å—á–µ—Ç“õ–∞ —Ç”©–ª–µ–¥—ñ“£—ñ–∑!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                parse_mode="Markdown",
                reply_markup=btn.menu_not_paid()
            )  
        await state.finish() 

    except Exception as e:
        print(e)
        await bot.send_message(
            admin,
            text="Error: %s"%str(e),
        ) 
        await Forma.s2.set()
        await bot.send_message(
                message.from_user.id,
                text="–¢”©–ª–µ–º –∂–∞—Å–∞“ì–∞–Ω —Å–æ“£ —á–µ–∫—Ç—ñ üì≤ .pdf —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!\n\n*–ù–ê–ó–ê–† –ê–£–î–ê–†–´“¢–´–ó –ß–ï–ö–¢–Ü –ú–û–î–ï–†–ê–¢–û–† –¢–ï–ö–°–ï–†–ï–î–Ü\n\n –ï–°–ö–ï–†–¢–£ ‚ùóÔ∏è\n–ñ–ê–õ“í–ê–ù –ß–ï–ö –ñ–Ü–ë–ï–†–£ –ù–ï–ú–ï–°–ï –ë–ê–°“ö–ê–î–ê –î“∞–´–†–´–° –ï–ú–ï–° –ß–ï–ö–¢–ï–† –ñ–Ü–ë–ï–†–£ –ê–í–¢–û–ú–ê–¢–¢–´ –¢“Æ–†–î–ï “∞–¢–´–° –û–ô–´–ù–ù–ê–ù –®–´“í–ê–†–´–õ–ê–î–´*",
                parse_mode="Markdown",
                reply_markup=btn.cancel()
            ) 
        
        
@dp.message_handler(state=Forma.s3, content_types=types.ContentType.CONTACT)
async def handler(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data['contact'] = message.contact.phone_number
    
    
    db.increase_money(data['sum'])

    if db.InsertClient(message.from_user.id, message.from_user.username,  data['contact'], datetime.now(), "paid", "true"):

        time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        for i in range(data['count']):
            gen = generator.generate_random_int()
            db.InsertLoto(
                message.from_user.id,
                gen,
                data['pdf_result'][3],
                message.from_user.username,
                data['fileName'],  
                data['contact'],
                time_now,
            )

        cinema_capture = "AgACAgIAAxkBAAMDZwu5bJkie-LmBieNdYsb2WsAAbWhAAKC4zEbTBBYSKkYXEW7TWtIAQADAgADeQADNgQ"
        cinema = "BAACAgIAAxkBAAMlZwvK9ncWSMW-pm9U7dYOSBiKrEUAAuFdAAJMEGBIJf2Hf71qUTI2BA"

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        media = [
            InputMediaPhoto(
                media=cinema_capture,
                parse_mode="Markdown",
                protect_content=True
            ),
            InputMediaVideo(
                media=cinema,
                caption="*–•–æ—Ç—è –ë—ã –ö–∏–Ω–æ–¥–∞ 3*",  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
                parse_mode="Markdown",
                protect_content=True
            ),
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫–∞–∫ –∞–ª—å–±–æ–º
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media,
            protect_content=True
        )

        await bot.send_message(
            message.from_user.id,
            text="*“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑ —Å—ñ–∑ —Å”ô—Ç—Ç—ñ —Ç”©–ª–µ–º –∂–∞—Å–∞–¥—ã“£—ã–∑ üëè\n\n“∞—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ–Ω—ñ“£ —Å–∞–Ω—ã–Ω –±—ñ–ª—É “Ø—à—ñ–Ω \nüßß “∞—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ–º —Ç“Ø–π–º–µ—Å—ñ–Ω –±–∞—Å—ã“£—ã–∑ üëá*",
            parse_mode="Markdown",
            reply_markup=btn.menu()
        )

        await state.finish()   
        return
    else:
        await bot.send_message(
            message.from_user.id,
            text="*–û–π ü§® –±—ñ—Ä –Ω”ô—Ä—Å–µ–¥–µ–Ω “õ–∞—Ç–µ –∫–µ—Ç—Ç—ñ\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
            parse_mode="Markdown",
            reply_markup=btn.menu_not_paid()
        )  
        await state.finish() 
    

