#!/usr/bin/env python
# -*- coding: utf-8 -*-
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from load import bot, dp
from aiogram import types
from FormaAdmin import *
from keyboard import*
from database import*
from config import*
from Forma import*
import asyncio
from traits import*
import time
from FormaAdmin import*



generator = Generator()
btn = Button()
db = Database()

@dp.message_handler(commands=['start', 'go'])
async def start_handler(message: types.Message):
    print(message.from_user.id)
      
    #from datetime import datetime
    #fileId = "AgACAgIAAxkBAANcZwwL-emYUtwEKC8tOLtMa93tOnMAAqfoMRtMEGBILbrCi2y-dy4BAAMCAAN5AAM2BA"

    #user_id = message.from_user.id
    #user_name = f"@{message.from_user.username}"
    #time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    #db.JustInsert(user_id, user_name, time_now)  
    
    await bot.send_message(
        message.from_user.id,
        text="""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FavPlaces! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã –¥–ª—è —Å–∫–∏–¥–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.""",
        parse_mode="Markdown",
        reply_markup=btn.menu()
    )

@dp.message_handler(commands=['admin'])
async def handler(message: types.Message):
    print(message.from_user.id)
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

@dp.callback_query_handler()
async def callback_inline(call: types.CallbackQuery):
    if call.data.startswith("accept_establishment:"):
        establishment_id = call.data.split(":")[1]
        if establishment_id in Establishments:
            est_data = Establishments.pop(establishment_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            await bot.send_message(est_data['user_id'], "–í–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ!")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await bot.send_message(call.message.chat.id, f"–ó–∞–≤–µ–¥–µ–Ω–∏–µ '{est_data['data']}' –æ–¥–æ–±—Ä–µ–Ω–æ!")
        else:
            await bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif call.data.startswith("reject_establishment:"):
        establishment_id = call.data.split(":")[1]
        if establishment_id in Establishments:
            est_data = Establishments.pop(establishment_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            await bot.send_message(est_data['user_id'], "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await bot.send_message(call.message.chat.id, f"–ó–∞–≤–µ–¥–µ–Ω–∏–µ '{est_data['data']}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        else:
            await bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# üñä –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ
@dp.message_handler(commands=['add'])
@dp.message_handler(Text(equals="üñä –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ"), content_types=['text'])
async def handler(message: types.Message):

    await Forma.s1.set()

    await bot.send_message(
        message.from_user.id,
        text="""*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å*""",
        parse_mode="Markdown",
        reply_markup=btn.cancel()
    )

# üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
@dp.message_handler(commands=['look'])
@dp.message_handler(Text(equals="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è"), content_types=['text'])
async def handler(message: types.Message):


    await bot.send_message(
        message.from_user.id,
        text="""*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å*""",
        parse_mode="Markdown",
        reply_markup=btn.cancel()
    )

# üßÆ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–ª—ã –∏ —Å–∫–∏–¥–æ—á–Ω—É—é –∫–∞—Ä—Ç—É
@dp.message_handler(commands=['search'])
@dp.message_handler(Text(equals="üßÆ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–ª—ã –∏ —Å–∫–∏–¥–æ—á–Ω—É—é –∫–∞—Ä—Ç—É"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*–£ –≤–∞—Å X –±–∞–ª–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ Y –∑–∞–≤–µ–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã.*""",
        parse_mode="Markdown",
        reply_markup=btn.sale()
    )


# üë§ –ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(commands=['profile'])
@dp.message_handler(Text(equals="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*–í–∞—à–µ –∏–º—è: %s*"""%message.from_user.first_name,
        parse_mode="Markdown"
    )


# Admins
# ‚úîÔ∏è –û–¥–æ–±—Ä–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
@dp.message_handler(Text(equals="‚úîÔ∏è –û–¥–æ–±—Ä–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å*""",
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

# üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
@dp.message_handler(Text(equals="üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å*""",
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

# üóÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π
@dp.message_handler(Text(equals="üóÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å*""",
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

